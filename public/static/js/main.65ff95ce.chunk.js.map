{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Spinner.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","Link","to","concat","style","textDecoration","className","classNames","bg-success","bg-danger","dist_default","format","MissionKey","Spinner","react_loader_spinner_default","type","color","height","width","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","Component","LAUNCH_QUERY","Launch_templateObject","Launch","parseInt","props","match","params","variables","launch_year","_launch$rocket","rocket","rocket_id","rocket_name","rocket_type","text-success","text-danger","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","display","margin","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.65ff95ce.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\n  return (\n    <Link\n      to={`/launch/${flight_number}`}\n      style={{ textDecoration: 'none' }}\n      className={classNames('card card-body mb-3 text-white', {\n        'bg-success': launch_success,\n        'bg-danger': !launch_success\n      })}\n    >\n      <div className=\"row align-items-center\">\n        <div className=\"col-md-9\">\n          <h4>Mission: {mission_name}</h4>\n          <p>\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link className=\"btn btn-warning\" to={`/launch/${flight_number}`}>\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </Link>\n  );\n}\n","import React from 'react';\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-5\">\n      <p>\n        <span className=\"rounded px-4 py-1 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"rounded px-4 py-1 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nexport default function Spinner() {\n  return <Loader type=\"Puff\" color=\"white\" height=\"50\" width=\"50\" />;\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\nimport Spinner from './Spinner';\n\nconst LAUNCHES_QUERY = gql`\n  {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <Spinner />;\n            if (error) console.log(error);\n\n            return (\n              <Fragment>\n                {data.launches.map(launch => (\n                  <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from 'react';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport classNames from 'classnames';\nimport Spinner from './Spinner';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport class Launch extends Component {\n  render() {\n    let flight_number = parseInt(this.props.match.params.flight_number);\n\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data: { launch } }) => {\n            if (loading) return <Spinner />;\n            if (error) console.log(error);\n\n            const {\n              flight_number,\n              mission_name,\n              launch_year,\n              launch_success,\n              rocket: { rocket_id, rocket_name, rocket_type }\n            } = launch;\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">Mission: </span> {mission_name}\n                </h1>\n                <h4 className=\"my-3\">Flight Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Flight number: {flight_number}</li>\n                  <li className=\"list-group-item\">Launch year: {launch_year}</li>\n                  <li className=\"list-group-item\">\n                    Launch Success:{' '}\n                    <span\n                      className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                      })}\n                    >\n                      {launch_success ? 'Yes' : 'No'}\n                    </span>\n                  </li>\n                </ul>\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                  <li className=\"list-group-item\">Rocket name: {rocket_name}</li>\n                  <li className=\"list-group-item\">Rocket type: {rocket_type}</li>\n                </ul>\n                <hr />\n                <Link to=\"\" className=\"btn btn-secondary\">\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport logo from './logo.png';\nimport './App.css';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img src={logo} alt=\"SpaceX Logo\" style={{ width: 300, display: 'block', margin: 'auto' }} />\n            <Route path=\"/\" exact component={Launches} />\n            <Route path=\"/launch/:flight_number\" exact component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.37a39b35.png\";"],"sourceRoot":""}